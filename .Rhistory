post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
options(scipen = 200)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.0000001]<-"<<0.05"
kable(post.df,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
options(scipen = 200)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.0000001]<-"<<0.05"
kable(post.df,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.0000001]<-"<<0.05"
kable(post.df,caption="table")
##Normality test for selected elements
##This part is not shown in the main report
test_pot<-pot%>%
dplyr::select(Group,Ca,Sr,Mn,Rb)
alist<-lapply(test_pot[2:5],function(x){aov(x~Group,data = test_pot)})
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.0000001]<-"<<0.05"
kable(post.df,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.000001]<-"<<0.05"
kable(post.df,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
kable(post.df,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
kable(post,caption="table")
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
kable(post,caption="table",digits = 4)
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.0000001]<-"<<0.05"
post$adj.p.value[post$adj.p.value>=0.998181]<-"0.9982"
kable(post,caption="table",digits = 4)
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
post$adj.p.value[post$adj.p.value>=0.998181]<-"0.9982"
kable(post,caption="table",digits = 4)
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
post$adj.p.value[post$adj.p.value>=0.998181]<-"0.9982"
post$adj.p.value[post$adj.p.value>=0.036106]<-"0.0361"
kable(post,caption="table",digits = 4)
##POST-HOC test
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
post$adj.p.value[post$adj.p.value<0.00001]<-"<<0.05"
post$adj.p.value[post$adj.p.value>=0.998181]<-"0.9982"
post$adj.p.value[post$adj.p.value>=0.036106&post$adj.p.value<0.998181]<-"0.0361"
kable(post,caption="table",digits = 4)
##generating scatter-plots for all elements
p1<-melt(pot,id.vars ="Group",variable.name = "elements")
plo <- ggplot(data = p1[1:4075,], aes(x=elements, y=value)) +
geom_boxplot(aes(fill=Group),outlier.shape = NA)
plo + facet_wrap( ~ elements, scales="free")+ theme(legend.position="bottom")+ylab(NULL)
plo
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(knitr)
library(psych)
library(broom)
library(readxl)
library(purrr)
library(corrplot)
library(gridExtra)
##Correlation matrix
parcor<-test_pot%>%group_by(Group)%>%nest()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(knitr)
library(psych)
library(broom)
library(readxl)
library(purrr)
library(corrplot)
library(gridExtra)
knitr::include_graphics("SGPanel.png")
knitr::include_graphics("SGPanel.png")
mytest<-function(alpha=0.05,myfun){
##Description: A random generation for the chi-square distribution
##Arguments:
##myfun:The function for testing, in character form,with no default
##alpha is the significance level and default to 0.05
if(missing(myfun))
stop("missing FUN with no default")
if(all(myfun!=c("my.rnorm","my.rchisq","my.rt")))
stop("cannot test such function")
if(myfun=="my.rnorm")
###I think you are missing a { here....
#test for normality
result<-shapiro.test(my.rnorm(1000))
test<-result$p.value>=alpha
###... and a } here
###same for the subsequent if statements
if(myfun=="my.rchisq")
###I'm not sure what this line is trying to do?
rdataset<-
#use rchisq() to generate benchmark distribution
result<-ks.test(my.rchisq(1000,1),rchisq(1000,1))
test<-result$p.value>=alpha
if(myfun=="my.rt")
rdataset<-my.rt(1000)
#use rt() to generate benchmark distribution
result<-ks.test(my.rt(1000,1),rt(1000,1))
test<-result$p.value>=alpha
###Should be indented like the if statement
### also watch how long it is
return(list(testing=myfun,paste("Did my function pass",test,sep = ":"),pvalue=result$p.value))
###Don't need 2 vertical spaces here!
}
my.rnorm<-function(n,mean=0,sd=1){
##Description: A random generation for the normal distribution
##Arguments:
##n : The total number of variables
##mean: The mean of the distribution,default to 0
##sd: The standard deviations of the distribution,default to 1
###Need to describe explicitly what the outputs are
###What about non-numeic values, values out of range, etc.
# handling missing values
if(missing(n))
stop("missing n argument")
# input checks
if(n<=0||round(n)!=n)
stop("n should be a non-negative integer")
if(sd<=0)
stop("sd should be a positive number")
###I'd leave a blank space at this point - between the end of the testing
### and the start of the main function
#begin generating random normal distributed numbers
###You're generating twice as many as needed here!
A<-runif(n)
B<-runif(n)
number1<-sin(2*pi*A)*sqrt(-2*log(B))
number2<-cos(2*pi*A)*sqrt(-2*log(B))
###Err, this was not part of the algorithm!
#the sum of two independent normally distributed random variables is normal,
#and its variance being the sum of the two variances
outputs<-(number1+number2)/sqrt(2)
outputs<-outputs*sd
outputs<-outputs+mean
###This should be indented
return(outputs)
}
testss<-function(X){
c<-CALL(as.character(x),1000)
return(c)
}
testss(my.rnorm)
testss<-function(X){
c<-call(as.character(x),1000)
return(c)
}
testss(my.rnorm)
testss<-function(x){
c<-call(as.character(x),1000)
return(c)
}
testss(my.rnorm)
testss <- function(FUN = round){
call(FUN,10)
}
testss(my.rnorm)
testss <- function(FUN = round){
call(as.character(FUN),10)
}
testss(my.rnorm)
testss <- function(FUN = warning){
x<-FUN(100)
}
testss(my.rnorm)
testss <- function(FUN = warning){
x<-FUN(10)
return(x)
}
testss(my.rnorm)
testss()
testss <- function(FUN = warning("no default")){
x<-FUN(10)
return(x)
}
testss()
testss <- function(FUN = stop("This is an error!")){
x<-FUN(10)
return(x)
}
testss()
get(my.rnorm)
testss <- function(FUN =c(my.rnorm,"haha"))){
x<-FUN(10)
return(x)
}
testss <- function(FUN =c(my.rnorm,"haha")){
x<-FUN(10)
}
testss <- function(FUN =c(my.rnorm,"haha")){
x<-FUN(10)
return(x)
}
testss()
testss <- function(FUN =getOption('fun.y','initialDefault')){
x<-FUN(10)
return(x)
}
testss <- function(FUN =select.list('fun.y','initialDefault')){
x<-FUN(10)
return(x)
}
library(car)
select.list(sort(.packages(all.available = TRUE)))
menu(c("List letters", "List LETTERS")
）
menu(c("List letters", "List LETTERS")）
menu(c("List letters", "List LETTERS"))
testss()
testss
testss <- function(FUN =select.list('my.rnorm','rnorm'){
x<-FUN(10)
return(x)
}
testss <- function(){
FUN<-select.list('my.rnorm','rnorm'
x<-FUN(10)
return(x)
}
testss <- function(){
FUN<-select.list('my.rnorm','rnorm')
x<-FUN(10)
return(x)
}
testss
testss()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(knitr)
library(psych)
library(broom)
potplants <- read_csv("~/R/assignments/potplants_MT5762.csv",
col_types = cols(Group = col_factor(levels = c("mb",
"pm", "bhb", "nth")), `Sample Name` = col_skip()))
potplants <- read_csv("~/R/assignments/potplants_MT5762.csv",
col_types = cols(Group = col_factor(levels = c("mb",
"pm", "bhb", "nth")), `Sample Name` = col_skip()))
library(readr)
potplants <- read_csv("~/R/assignments/potplants_MT5762.csv",
col_types = cols(Group = col_factor(levels = c("mb",
"pm", "bhb", "nth")), `Sample Name` = col_skip()))
View(potplants)
library(tidyverse)
library(reshape2)
library(knitr)
library(psych)
library(broom)
test_pot<-potplants%>%
dplyr::select(Group,K,Ti)
alist<-lapply(test_pot[2:6],function(x){aov(x~Group,data = test_pot)})
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
alist<-lapply(test_pot[2:3],function(x){aov(x~Group,data = test_pot)})
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
resi.df<-do.call("cbind",resi.list)
resi.tbl<-data.frame(Group=as.character(test_pot$Group),resi.df)
resi.tbl$id=rownames(resi.tbl)
View(resi.tbl)
resi.df<-do.call("cbind",resi.list)
resi.tbl<-data.frame(Group=as.character(test_pot$Group),resi.df)
resi.tbl$id=rownames(resi.tbl)
rp=sapply(resi.tbl[,2:3], function(dat){qqnorm(dat,plot.it = FALSE)$x})
rp=as.data.frame(rp)
rp$id=rownames(rp)
rb=melt(resi.tbl[,2:4],id.vars = "id",variable.name = "elements",value.name = "val")
rpb=melt(rp,id.vars = "id",variable.name = "elements",value.name = "pro")
re=merge(rb,rpb)
qqp<-ggplot(data = re,aes(x=pro,y=val)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Theoretical") +
ylab("Sample") +
facet_wrap(~elements,scales = "free")
qqp
resisd<-resi.tbl%>%select(-id)%>%group_by(Group)%>%summarise_all(sd)
View(resisd)
plot(alist$K)
kp<-plot(alist$K)
Kp<-alist$K
plant.mod = data.frame(Fitted = fitted(alist$K),
Residuals = resid(alist$K), site = test_pot$Group)
ggplot(plant.mod, aes(Fitted, Residuals, colour = site)) + geom_point()
plant.mod = data.frame(Fitted = fitted(alist$K),
Residuals = resid(alist$K), site = test_pot$Group)
kp<-ggplot(plant.mod, aes(Fitted, Residuals, colour = site)) + geom_point()
tplant.mod = data.frame(Fitted = fitted(alist$Ti),
Residuals = resid(alist$Ti), site = test_pot$Group)
tp<-ggplot(plant.mod, aes(Fitted, Residuals, colour = site)) + geom_point()
gridExtra::grid.arrange(kp,tp)
tplant.mod = data.frame(Fitted = fitted(alist$Ti),
Residuals = resid(alist$Ti), site = test_pot$Group)
tp<-ggplot(tplant.mod, aes(Fitted, Residuals, colour = site)) + geom_point()
gridExtra::grid.arrange(kp,tp)
aov.ti<- lapply(alist, tidy)
aovdf<-do.call("rbind",aov.ti)
aovdf<-na.omit(aovdf)
View(aovdf)
aovdf$p.value<-"<<0.05"
aovdf$elements<-c("K","Ti")
post.test<-lapply(alist, TukeyHSD)
post.test<-lapply(post.test, tidy)
post.df<-do.call("rbind",post.test)
post<-as.data.frame(post.df)
View(post)
post$adj.p.value<-round(post.test$adj.p.value,4)
post$adj.p.value<-round(post$adj.p.value,4)
post$adj.p.value[post$adj.p.value<0.00009]<-"<<0.05"
kable(post[,2:6],caption = "Tukey test for Ti")
options(scipen = 200)
kable(post[,2:6],caption = "Tukey test for Ti")
citation(R)
citation("rstudioapi")
car::box.cox(alist$K)
car::BoxCox(alist$K)
car::boxCox(alist$K)
car::boxCox(alist$K,lambda = seq(-2, 2, 1/10), plotit = TRUE)
library(car)
car::boxCox(alist$K,lambda = seq(-2, 2, 1/10), plotit = TRUE)
boxCox(alist$K,lambda = seq(-2, 2, 1/10), plotit = TRUE)
class(alist$K)
class(alist$K$call)
class(alist$K$model)
boxCox(aov(K~Group,data=test_pot),lambda = seq(-2, 2, 1/10), plotit = TRUE)
qqnorm(log(resi.list$K))
qqline(log(resi.list$K))
new=test_pot
new$K=log(new$K)
aov(K~Group,data=new)
summary(aov(K~Group,data=new))
ak=aov(K~Group,data=new)
qqnorm(ak$residuals)
qqline(ak$residuals)
shapiro.test(ak$residuals)
ggplot(data.frame(x=ak$fitted.values,y=ak$residuals,site=test_pot$Group),aes(x,y,colour=site))+geom_point()
plot(K~Group,data=new)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(lm(K~Group,data=new), label.size = 3)
tidy(ak)
install.packages("Gmisc")
autoplot(alist$K, label.size = 3)
library(ggfortify)
autoplot(alist$K, label.size = 3)
autoplot(alist$Ti, label.size = 3)
View(resi.list)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(knitr)
library(psych)
library(broom)
library(ggfortify)
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
##examine constant spread
resi.tbl<-do.call("rbind",resi.list)
resisd<-resi.tbl%>%select(-id)%>%group_by(Group)%>%summarise_all(sd)
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
##examine constant spread
resi.tbl<-do.call("rbind",resi.list)
resi.tbl<-as.data.frame(resi.tbl)
resisd<-resi.tbl%>%select(-id)%>%group_by(Group)%>%summarise_all(sd)
View(resi.tbl)
View(resi.list)
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
##examine constant spread
resi.tbl<-do.call("cbind",resi.list)
resi.tbl<-as.data.frame(resi.tbl)
resi.tbl<-data.frame(Group=test_pot$Group,K=resi.tbl$K,Ti=resi.tbl$Ti)
resisd<-resi.tbl%>%group_by(Group)%>%summarise_all(sd)
kable(resisd,caption = "Constant spread test for selected elements")
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
kable(nordf,caption = "Normality test for selected elements")
##examine constant spread
resi.tbl<-do.call("cbind",resi.list)
resi.tbl<-as.data.frame(resi.tbl)
resi.tbl<-data.frame(Group=test_pot$Group,K=resi.tbl$K,Ti=resi.tbl$Ti)
resisd<-resi.tbl%>%group_by(Group)%>%summarise_all(sd)
kable(resisd,caption = "Constant spread test for selected elements")
##POST-HOC test
kdf<-tidy(TukeyHSD(ak))
tdf<-tidy(TukeyHSD(alist$Ti))
tdf[1:4,6]<-"<<0.05"
kable(tdf,caption = "Tukey test for Ti",digits = 4)
kable(kdf,caption = "Tukey test for log(K)",digits = 4)
##POST-HOC test
kdf<-tidy(TukeyHSD(ak))
tdf<-tidy(TukeyHSD(alist$Ti))
tdf[1:4,6]<-"<<0.05"
tdf[5,6]<-"0.1084"
tdf[6,6]<-"0.0009"
kdf$pvalue<-round(kdf$adj.p.value,4)
kdf$adj.p.value[1:3]<-"<<0.05"
kdf$adj.p.value[4:6]<-as.character(kdf$pvalue[4:6])
kdf<-kdf[,-7]
kable(tdf,caption = "Tukey test for Ti",digits = 4)
kable(kdf,caption = "Tukey test for log(K)",digits = 4)
View(nordf)
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
nordf<-as.data.frame(nordf)
colnames(nordf)<-"P.value"
nordf$Elements<-rownames(nordf)
rownames(nordf)<-""
#normality test for residuals
resi.list<-lapply(alist, function(x){x$resi})
nor.list<-lapply(resi.list, shapiro.test)
nor.list<-lapply(nor.list,function(x){x$p.value})
nordf<-do.call("rbind",nor.list)
nordf<-as.data.frame(nordf)
colnames(nordf)<-"pvalue"
kable(nordf,caption = "Normality test for selected elements")
##examine constant spread
resi.tbl<-do.call("cbind",resi.list)
resi.tbl<-as.data.frame(resi.tbl)
resi.tbl<-data.frame(Group=test_pot$Group,K=resi.tbl$K,Ti=resi.tbl$Ti)
resisd<-resi.tbl%>%group_by(Group)%>%summarise_all(sd)
kable(resisd,caption = "Constant spread test for selected elements")
devtools::install_github("ropenscilabs/gramr")
write_good_ip()
library(gmar)
library(grmar)
gramr:::write_good_ip()
citation("ggfortify")
setwd("~/myRstuff/Rprac/basictemplate")
